{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"BookStore","text":"<p>BookStore is an online shopping application selling books.</p>"},{"location":"#goal","title":"Goal","text":"<p>The main goal of building this application is to learn various technologies by building a reasonably complex application.</p>"},{"location":"#technical-architecture","title":"Technical Architecture","text":"<p>The key components of BookStore application are:</p> <ul> <li>bookstore-webapp: This is the customer facing web application where they can browse through available books, add books to cart and place an order.</li> <li>bookstore-backoffice: This is a backoffice web application used by administrators and staff to setup the books catalog and manage orders.</li> <li>backing-services: These are domain-oriented backend services that fulfill the needs for bookstore-webapp and bookstore-backoffice.</li> </ul> <p>We would like to build the backing-services as independently deployable microservices so that each service can be developed in the preferred language/framework. Most of these backing-services will expose REST APIs to be consumed by webapp, backoffice and also by other APIs. Some backing-services could be only event processors where they consume events from an event store(Kafka, RabbitMQ etc), process them and optionally publish other events.</p> <p>The web applications bookstore-webapp, bookstore-backoffice could be implemented using SPA frameworks like Angular, VueJS, ReactJS etc or using server-side rendering technologies like Thymeleaf.</p> <p></p>"},{"location":"#backend-services","title":"Backend Services","text":"<ol> <li>catalog-service</li> <li>payment-service</li> <li>order-service</li> <li>delivery-service</li> </ol>"},{"location":"#typical-application-flow","title":"Typical application flow","text":"<p>A typical application usage flow looks like:</p> <ul> <li>Customer browse through product catalog</li> <li>Add preferred products to cart</li> <li>Go to checkout page</li> <li>Enter customer details, delivery address, payment details.</li> <li>Place order<ul> <li>Validate order details</li> <li>Validate Payment details</li> <li>If payment details is valid then set status to \"NEW\" otherwise to \"ERROR\"</li> <li>Save order details in DB</li> <li>Publish OrderCreated Event</li> <li>If payment details is invalid then Publish OrderError Event</li> </ul> </li> <li>Order Processing<ul> <li>Order-service receives OrderCreated Event and send an email notification to customer</li> <li>Order-service receives OrderError Event and send an email notification to customer</li> <li>Delivery-service receives OrderCreated Event and save order with status READY_TO_SHIP</li> <li>Delivery-service DeliveryJob update local status from READY_TO_SHIP to DELIVERED and then publish OrderDelivered Event</li> <li>Order-service receives OrderDelivered Event and update status to DELIVERED</li> <li>Order-service receives OrderDelivered Event and send an email notification to customer</li> </ul> </li> <li>Customer receives order update emails with a link to view current order details.</li> </ul>"},{"location":"#how-to-contribute","title":"How to contribute?","text":"<ul> <li>Run the application and let us know if you face any issue</li> <li>Review the code and add your review comments</li> <li>Contribute implementation of a service in your favourite language/framework</li> </ul>"},{"location":"catalog-service/","title":"Catalog Service","text":"<p>The catalog-service manages the books catalog and exposes the following REST API endpoints:</p> <ul> <li>Get books by page</li> <li>Get book by code(ISBN)</li> <li>Create new Book</li> <li>Update existing book</li> <li>Delete a book</li> <li>Search books by title or description</li> </ul>"},{"location":"catalog-service/#api-endpoints","title":"API Endpoints","text":""},{"location":"catalog-service/#1-get-books-by-page","title":"1. Get books by page","text":"<ul> <li>Endpoint : <code>GET /api/products?page=1</code></li> <li>Security: N/A</li> <li>Response:</li> </ul> <pre><code>{\n   \"totalElements\": 124,\n   \"totalPages\": 13,\n   \"currentPage\": 1,\n   \"data\": [\n      {\n          \"id\": \"uuid\",\n          \"code\": \"ABCDEFGH\",\n          \"name\": \"Book Title\",\n          \"description\": \"book description\",\n          \"image_url\": \"https://images.com/1.png\",\n          \"price\": 24.50,\n          \"discount\": 1.50,\n          \"salePrice\": 23.0\n      }\n   ]\n}\n</code></pre>"},{"location":"catalog-service/#2-get-book-by-codeisbn","title":"2. Get book by code(ISBN)","text":"<ul> <li>Endpoint : <code>GET /api/products/{code}</code></li> <li>Security: N/A</li> <li>Success Response:</li> </ul> <pre><code>{\n  \"id\": \"uuid\",\n  \"code\": \"ABCDEFGH\",\n  \"name\": \"Book Title\",\n  \"description\": \"book description\",\n  \"image_url\": \"https://images.com/1.png\",\n  \"price\": 24.50,\n  \"discount\": 1.50,\n  \"salePrice\": 23.0\n}\n</code></pre> <ul> <li>Error Response - Status Code: 404 - Not Found</li> </ul> <pre><code>  {\n      \"message\": \"Product with code &lt;ISBN&gt; not found\"\n  } \n</code></pre>"},{"location":"catalog-service/#3-search-books-by-title-or-description","title":"3. Search books by title or description","text":"<ul> <li>Endpoint : <code>GET /api/products/search?query=keyword&amp;page=1</code></li> <li>Security: N/A</li> <li>Response:</li> </ul> <pre><code>{\n   \"totalElements\": 114,\n   \"totalPages\": 12,\n   \"currentPage\": 1,\n   \"data\": [\n      {\n          \"id\": \"uuid\",\n          \"code\": \"ABCDEFGH\",\n          \"name\": \"Book Title\",\n          \"description\": \"book description\",\n          \"image_url\": \"https://images.com/1.png\",\n          \"price\": 24.50,\n          \"discount\": 1.50,\n          \"salePrice\": 23.0\n      }\n   ]\n}\n</code></pre>"},{"location":"catalog-service/#4-create-new-book","title":"4. Create new Book","text":"<ul> <li>Endpoint : <code>POST /api/products</code></li> <li>Security: Header <code>Authorization: Bearer &lt;JWT_TOKEN&gt;</code> with Role ADMIN or STAFF</li> <li>Request Body:</li> </ul> <pre><code>{\n  \"code\": \"ABCDEFGH\", // unique\n  \"name\": \"Book Title\", // mandatory\n  \"description\": \"book description\", // optional\n  \"image_url\": \"https://images.com/1.png\",// optional\n  \"price\": 24.50 // mandatory\n  \"discount\": 2.50 // optional\n}\n</code></pre> <ul> <li>Success Response: Status Code: 201</li> </ul> <pre><code>{\n  \"id\": \"uuid\",\n  \"code\": \"ABCDEFGH\",\n  \"name\": \"Book Title\",\n  \"description\": \"book description\",\n  \"image_url\": \"https://images.com/1.png\",\n  \"price\": 24.50,\n  \"discount\": 2.50,\n  \"salePrice\": 22.0\n}\n</code></pre> <ul> <li>Error Response - Bad Request - Status Code: 400<ul> <li>Reasons: Missing required fields, Book with ISBN already exist etc.</li> </ul> </li> </ul> <pre><code>  {\n      \"message\": \"Product with ISBN already exist\"\n  } \n</code></pre>"},{"location":"catalog-service/#5-update-existing-book","title":"5. Update existing book","text":"<ul> <li>Endpoint : <code>PUT /api/products/{code}</code></li> <li>Security: Header <code>Authorization: Bearer &lt;JWT_TOKEN&gt;</code> with Role ADMIN or STAFF</li> <li>Request Body:</li> </ul> <pre><code>{\n  \"name\": \"Book Title\", // mandatory\n  \"description\": \"book description\", // optional\n  \"image_url\": \"https://images.com/1.png\", // optional\n  \"price\": 24.50, // mandatory\n  \"discount\": 2.50\n}\n</code></pre> <ul> <li>Success Response:<ul> <li>Status Code: 200</li> <li>Body:</li> </ul> </li> </ul> <pre><code>{\n  \"id\": \"uuid\",\n  \"code\": \"ISBN\",\n  \"name\": \"Book Title\",\n  \"description\": \"book description\",\n  \"image_url\": \"https://images.com/1.png\",\n  \"price\": 24.50,\n  \"discount\": 2.50,\n  \"salePrice\": 22.0\n}\n</code></pre> <ul> <li>Error Response - Bad Request<ul> <li>Reasons: Missing required fields, Book with ISBN not exist etc.</li> <li>Status Code: 400</li> <li>Body:</li> </ul> </li> </ul> <pre><code>  {\n      \"message\": \"Product with ISBN not exist\"\n  } \n</code></pre>"},{"location":"catalog-service/#6-delete-a-book","title":"6. Delete a book","text":"<ul> <li>Endpoint : <code>DELETE /api/products/{code}</code></li> <li>Security: Header <code>Authorization: Bearer &lt;JWT_TOKEN&gt;</code> with Role <code>ADMIN</code> or <code>STAFF</code></li> <li>Success Response:<ul> <li>Status Code: 200</li> </ul> </li> <li>Error Response - Not Found<ul> <li>Reasons: Book with ISBN not exist etc.</li> <li>Status Code: 404</li> <li>Body:</li> </ul> </li> </ul> <pre><code>  {\n      \"message\": \"Product with ISBN not exist\"\n  } \n</code></pre>"},{"location":"delivery-service/","title":"Delivery Service","text":"<p>The delivery-service manages order delivery process.</p>"},{"location":"delivery-service/#event-handlers","title":"Event Handlers","text":"<ol> <li>ORDER_CREATED event handler: </li> <li>Save order details with status=\"READY_TO_SHIP\"</li> </ol>"},{"location":"delivery-service/#jobs","title":"Jobs:","text":""},{"location":"delivery-service/#orderdeliveryjob","title":"OrderDeliveryJob:","text":"<ul> <li>Starts processing orders with status=\"READY_TO_SHIP\"</li> <li>deliver the order (after certain delay) and publish ORDER_DELIVERED event.</li> <li>If the order can't be delivered then publish ORDER_CANCELLED event.</li> <li>In case of any failures publish ORDER_ERROR event.</li> </ul>"},{"location":"implementations/","title":"Implementations","text":""},{"location":"implementations/#catalog-service","title":"Catalog Service","text":"Language Description Repository Java Java 17, SpringBoot, MongoDB catalog-service-java-springboot Go Go 1.19, Gin catalog-service-go"},{"location":"implementations/#payment-service","title":"Payment Service","text":"Language Description Repository Java Java 17, SpringBoot, JPA, Postgres payment-service-java-springboot Go Go 1.19, Gorilla Mux, Postgres payment-service-go"},{"location":"implementations/#order-service","title":"Order Service","text":"Language Description Repository Java Java 17, SpringBoot, JPA, Kafka, Postgres order-service-java-springboot"},{"location":"implementations/#delivery-service","title":"Delivery Service","text":"Language Description Repository Java Java 17, SpringBoot, Kafka delivery-service-java-springboot"},{"location":"implementations/#bookstore-webapp","title":"BookStore Webapp","text":"Language Description Repository TypeScript TypeScript, ReactJS bookstore-ui-reactjs"},{"location":"implementations/#backoffice-webapp","title":"BackOffice Webapp","text":"Language Description Repository N/A N/A N/A"},{"location":"order-service/","title":"Order Service","text":"<p>This service manages customer carts and orders:</p> <ul> <li>Cart APIs<ul> <li>Create a new cart.</li> <li>Add item to cart</li> <li>Update quantity of an item in a cart</li> <li>Remove item from a cart</li> <li>Delete a cart</li> </ul> </li> <li>Order APIs<ul> <li>Create an order. After successfully saving order info publish ORDER_CREATED event.</li> <li>Cancel order. After cancelling order publish ORDER_CANCELLED event.</li> <li>Get all orders</li> <li>Get order by order_number</li> </ul> </li> </ul>"},{"location":"order-service/#order-event-processing-handlers","title":"Order Event Processing Handlers:","text":"<ul> <li>ORDER_DELIVERED event handler: Update order status to DELIVERED</li> <li>ORDER_CANCELLED event handler: Update order status to CANCELLED</li> <li>ORDER_ERROR event handler: Update order status to ERROR</li> </ul>"},{"location":"order-service/#order-event-notification-handlers","title":"Order Event Notification Handlers:","text":"<ul> <li>ORDER_CREATED event handler: Send order received email notification</li> <li>ORDER_CANCELLED event handler: Send order cancelled email notification</li> <li>ORDER_DELIVERED event handler: Send order delivered email notification</li> <li>ORDER_ERROR event handler: Send order can't be fulfilled email notification</li> </ul>"},{"location":"order-service/#api-endpoints","title":"API Endpoints","text":""},{"location":"order-service/#1-get-cart-for-a-given-cartid","title":"1. Get cart for a given cartId","text":"<ul> <li>Endpoint : <code>GET /api/carts&lt;?cartId=CART_ID&gt;</code></li> <li>Security: N/A</li> <li>Response:<ul> <li>Status Code: 200</li> <li>Body:</li> </ul> </li> </ul> <pre><code>{\n  \"id\": \"cart_id\",\n  \"items\": [\n    {\n        \"code\": \"ISBN_1\",\n        \"name\": \"product name\",\n        \"description\": \"description\",\n        \"price\": 1.50,\n        \"quantity\": 1\n    }\n  ]\n}\n</code></pre> <p>Here cartId query parameter is optional. If not included this request will create a new cart. If cartId is specified then it will return the cart info for given cartId, if cartId not found then returns 404.</p>"},{"location":"order-service/#2-add-item-to-cart","title":"2. Add item to cart","text":"<ul> <li>Endpoint : <code>POST /api/carts&lt;?cartId=CART_ID&gt;</code></li> <li>Security: N/A</li> <li>Request Body:</li> </ul> <pre><code>    {\n        \"code\": \"ISBN_1\",\n        \"quantity\": 1 //optional, default to 1\n    }\n</code></pre> <ul> <li>Response:<ul> <li>Status Code: 200</li> <li>Body:</li> </ul> </li> </ul> <pre><code>{\n  \"id\": \"cart_id\",\n  \"items\": [\n    {\n        \"code\": \"ISBN_1\",\n        \"name\": \"product name\",\n        \"description\": \"description\",\n        \"price\": 12.50,\n        \"quantity\": 1\n    }\n  ]\n}\n</code></pre>"},{"location":"order-service/#3-update-item-quantity-in-cart","title":"3. Update item quantity in cart","text":"<ul> <li>Endpoint : <code>PUT /api/carts?cartId=CART_ID</code></li> <li>Security: N/A</li> <li>Request Body:</li> </ul> <pre><code>    {\n        \"code\": \"ISBN_1\",\n        \"quantity\": 1\n    }\n</code></pre> <ul> <li>Response:<ul> <li>Status Code: 200</li> <li>Body:</li> </ul> </li> </ul> <pre><code>{\n  \"id\": \"cart_id\",\n  \"items\": [\n    {\n        \"code\": \"ISBN_1\",\n        \"name\": \"product name\",\n        \"description\": \"description\",\n        \"price\": 12.50,\n        \"quantity\": 1\n    }\n  ]\n}\n</code></pre>"},{"location":"order-service/#4-remove-item-in-cart","title":"4. Remove item in cart","text":"<ul> <li>Endpoint : <code>DELETE /api/carts/items/{code}?cartId=CART_ID</code></li> <li>Security: N/A</li> <li>Response:<ul> <li>Status Code: 200</li> <li>Body:</li> </ul> </li> </ul> <pre><code>{\n  \"id\": \"cart_id\",\n  \"items\": [\n    {\n        \"code\": \"ISBN_1\",\n        \"name\": \"product name\",\n        \"description\": \"description\",\n        \"price\": 1.50,\n        \"quantity\": 1\n    }\n  ]\n}\n</code></pre>"},{"location":"order-service/#5-delete-cart","title":"5. Delete cart","text":"<ul> <li>Endpoint : <code>DELETE /api/carts?cartId=CART_ID</code></li> <li>Security: N/A</li> <li>Response:<ul> <li>Status Code: 200</li> </ul> </li> </ul>"},{"location":"order-service/#6-create-an-order","title":"6. Create an order","text":"<ul> <li>Endpoint : <code>POST /api/orders</code></li> <li>Security: N/A</li> <li>Request Body:</li> </ul> <pre><code>{\n  \"items\": [\n      {\n          \"code\": \"ABCDEFGH\", // unique\n          \"name\": \"Book Title\", // mandatory\n          \"price\": 24.50, // mandatory\n          \"quantity\": 1\n      },\n      {\n          \"code\": \"JKLMNOP\", // unique\n          \"name\": \"Book Title\", // mandatory\n          \"price\": 20.50, // mandatory\n          \"quantity\": 2\n      }\n  ],\n  \"customer\": {\n    \"name\":\"customer name\", // mandatory\n    \"email\": \"customer@email.com\", // mandatory\n    \"phone\": \"999999999\" // mandatory\n  },\n  \"deliveryAddress\": {\n      \"addressLine1\": \"street\", // mandatory\n      \"addressLine2\": \"area\",\n      \"city\": \"city\", // mandatory\n      \"state\": \"state\", // mandatory\n      \"zipCode\": \"zipcode\", // mandatory\n      \"country\": \"Country\" // mandatory\n  },\n  \"payment\": {\n      \"cardNumber\": \"1234123412341234\", // mandatory\n      \"cvv\": \"123\", // mandatory\n      \"expiryMonth\": 2, // mandatory\n      \"expiryYear\": 2025 // mandatory\n  }\n}\n</code></pre> <ul> <li>Success Response:<ul> <li>Status Code: 202</li> <li>Body:</li> </ul> </li> </ul> <pre><code>{\n   \"orderId\":\"abcd-efgh-ijkl-mnop\",\n   \"status\": \"NEW\"\n}\n</code></pre> <ul> <li>Error Response - Bad Request<ul> <li>Reasons: Missing required fields, ISBN not exists, Payment rejected.</li> <li>Status Code: 400</li> <li>Body:</li> </ul> </li> </ul> <pre><code>  {\n      \"message\": \"Payment rejected\"\n  } \n</code></pre>"},{"location":"order-service/#7-cancel-order","title":"7. Cancel order","text":"<ul> <li>Endpoint : <code>DELETE /api/orders/{orderId}</code></li> <li>Security: Header <code>Authorization: Bearer &lt;JWT_TOKEN&gt;</code> with Role ADMIN or STAFF</li> <li>Success Response:<ul> <li>Status Code: 200</li> <li>Body:</li> </ul> </li> </ul> <pre><code>{\n   \"orderId\":\"abcd-efgh-ijkl-mnop\",\n   \"status\": \"CANCELLED\"\n}\n</code></pre> <ul> <li>Error Response - Bad Request<ul> <li>Reasons: Missing required fields, orderId not exists, Order already delivered.</li> <li>Status Code: 400</li> <li>Body: <code>json   {       \"message\": \"orderId not exists\"   }</code></li> </ul> </li> </ul>"},{"location":"order-service/#8-get-all-orders","title":"8. Get all orders","text":"<ul> <li>Endpoint : <code>GET /api/orders</code></li> <li>Security: Header <code>Authorization: Bearer &lt;JWT_TOKEN&gt;</code> with Role ADMIN or STAFF</li> <li>Success Response:<ul> <li>Status Code: 200</li> <li>Body:</li> </ul> </li> </ul> <pre><code>  {\n     \"totalElements\": 25,\n     \"totalPages\": 3,\n     \"currentPage\": 1,\n     \"data\": [  \n        {\n           \"orderId\":\"abcd-efgh-ijkl-mnop\",\n           \"status\": \"NEW\",\n           \"items\": [\n              {\n                  \"code\": \"ABCDEFGH\",\n                  \"name\": \"Book Title\",\n                  \"price\": 24.50,\n                  \"quantity\": 1\n              },\n              {\n                  \"code\": \"JKLMNOP\",\n                  \"name\": \"Book Title\",\n                  \"price\": 20.50,\n                  \"quantity\": 2\n              }\n          ],\n          \"customer\": {\n            \"name\":\"customer name\",\n            \"email\": \"customer@email.com\",\n            \"phone\": \"999999999\"\n          },\n          \"deliveryAddress\": {\n              \"addressLine1\": \"street\",\n              \"addressLine2\": \"area\",\n              \"city\": \"city\",\n              \"state\": \"state\",\n              \"zipCode\": \"zipcode\",\n              \"country\": \"Country\"\n          }\n        }\n    ]\n}\n</code></pre>"},{"location":"order-service/#9-get-order-by-order_id","title":"9. Get order by order_id","text":"<ul> <li>Endpoint : <code>GET /api/orders/{orderId}</code></li> <li>Security: N/A</li> <li>Success Response:<ul> <li>Status Code: 200</li> <li>Body:</li> </ul> </li> </ul> <pre><code>{\n   \"orderId\":\"abcd-efgh-ijkl-mnop\",\n   \"status\": \"NEW\",\n   \"items\": [\n      {\n          \"code\": \"ABCDEFGH\",\n          \"name\": \"Book Title\",\n          \"price\": 24.50,\n          \"quantity\": 1\n      },\n      {\n          \"code\": \"JKLMNOP\",\n          \"name\": \"Book Title\",\n          \"price\": 20.50,\n          \"quantity\": 2\n      }\n  ],\n  \"customer\": {\n    \"name\":\"customer name\",\n    \"email\": \"customer@email.com\",\n    \"phone\": \"999999999\"\n  },\n  \"deliveryAddress\": {\n      \"addressLine1\": \"street\",\n      \"addressLine2\": \"area\",\n      \"city\": \"city\",\n      \"state\": \"state\",\n      \"zipCode\": \"zipcode\",\n      \"country\": \"Country\"\n  }\n}\n</code></pre> <ul> <li>Error Response - Not Found<ul> <li>Status Code: 404</li> <li>Body:</li> </ul> </li> </ul> <pre><code>{\n  \"message\": \"Order with id &lt;order_id&gt; not found\"\n} \n</code></pre>"},{"location":"order-service/#order-event-processing-handlers_1","title":"Order Event Processing Handlers:","text":"<ol> <li> <p>ORDER_DELIVERED event handler: </p> <ul> <li>Update order status to \"DELIVERED\"</li> </ul> </li> <li> <p>ORDER_ERROR event handler: </p> <ul> <li>Update order status to \"ERROR\"</li> </ul> </li> <li> <p>ORDER_CANCELLED event handler:</p> <ul> <li>Update order status to \"CANCELLED\"</li> </ul> </li> </ol>"},{"location":"order-service/#order-event-notification-handlers_1","title":"Order Event Notification Handlers:","text":"<ol> <li> <p>ORDER_CREATED event handler:</p> <ul> <li>Send order received email notification</li> </ul> </li> <li> <p>ORDER_CANCELLED event handler:</p> <ul> <li>Send order cancellation email notification</li> </ul> </li> <li> <p>ORDER_DELIVERED event handler:</p> <ul> <li>Send order delivered email notification</li> </ul> </li> <li> <p>ORDER_ERROR event handler:</p> <ul> <li>Send order can't be fulfilled email notification</li> </ul> </li> </ol>"},{"location":"order-service/#jobs","title":"Jobs","text":"<ol> <li>Order Processing Job<ul> <li>When an Order is placed and Payment is Accepted then Order details will be stored in DB with status=\"NEW\".</li> <li>This job runs at regular intervals and process every order with status=\"NEW\"</li> <li>Each new order details will be published with OrderCreatedEvent </li> </ul> </li> </ol>"},{"location":"payment-service/","title":"Payment Service","text":"<p>The payment-services exposes API to validate payment info (credit card number, cvv, expiry month/year)</p>"},{"location":"payment-service/#api-endpoints","title":"API Endpoints","text":""},{"location":"payment-service/#1-validate-payment-info","title":"1. Validate Payment Info","text":"<ul> <li>Endpoint : <code>POST /api/payments/validate</code></li> <li>Security: N/A</li> <li>Request Body:</li> </ul> <pre><code>{\n  \"cardNumber\": \"1234123412341234\", // mandatory\n  \"cvv\": \"123\", // mandatory\n  \"expiryMonth\": 2, // mandatory\n  \"expiryYear\": 2025 // mandatory\n}\n</code></pre> <ul> <li>Success Response:<ul> <li>Status Code: 200</li> <li>Body:</li> </ul> </li> </ul> <pre><code>{\n  \"status\": \"APPROVED | REJECTED\"\n}\n</code></pre>"},{"location":"deployment/docker-compose/","title":"BookStore Deployment","text":"<p>The bookstore application is implemented using multiple independently deployable services. Each service can be implemented using any language/framework of your choice. Also, each service has its own data persistence mechanism and any database shouldn't be shared by multiple services. However, a message broker will be used to communicate order events to other services and decided to use Kafka for this purpose.</p>"},{"location":"deployment/docker-compose/#how-to-run-the-application-using-docker-compose","title":"How to run the application using docker-compose?","text":""},{"location":"deployment/docker-compose/#1-i-want-to-work-on-only-a-specific-service","title":"1. I want to work on only a specific service","text":"<p>Each service implementation will provide a docker-compose.yml file which defines all the dependent services. You should be able to run <code>docker-compose up -d</code> to start these containers and run your application from IDE or terminal.</p> <p>For example, if you want to run <code>catalog-service-java-springboot</code> service then you do following:</p> <pre><code>$ git clone https://github.com/sivalabs-bookstore/catalog-service-java-springboot.git\n$ cd catalog-service-java-springboot\n$ docker-compose up -d\n$ ./mvnw spring-boot:run (or run the application from your IDE)\n</code></pre>"},{"location":"deployment/docker-compose/#2-i-just-want-to-run-one-or-more-services","title":"2. I just want to run one or more services","text":"<p>Each service implementation will be published as a Docker image to DockerHub. So, if you just want to run one or more services then you can use docker-compose manifest files in https://github.com/sivalabs-bookstore/bookstore-deployment/tree/main/docker-compose</p> <p>IMPORTANT NOTE</p> <p>Due to the memory limitations of your computer, sometimes services may not start properly. Please check the container logs to make sure the services started correctly.</p> <p>If you want to just run catalog-service-java-springboot and payment-service-java-springboot services then you can do the following:</p> <pre><code>$ git clone https://github.com/sivalabs-bookstore/bookstore-deployment.git\n$ cd bookstore-deployment/docker-compose\n$ docker-compose -f payment-service-java-springboot.yml -f catalog-service-java-springboot.yml up -d\n</code></pre> <p>The following services depends on Kafka:</p> <ul> <li>order-service</li> <li>delivery-service</li> </ul> <p>If you want to run any service that depends on Kafka then you should include common-infra.yml to the list of YAML files.</p> <p>For example if you want to run payment-service-java-springboot and order-service-java-springboot then you can do the following:</p> <pre><code>docker-compose -f common-infra.yml  -f payment-service-java-springboot.yml -f order-service-java-springboot.yml up -d\n</code></pre> <p>If you want to run all services using java-springboot stack</p> <pre><code>docker-compose -f common-infra.yml \\\n  -f catalog-service-java-springboot.yml \\\n  -f payment-service-java-springboot.yml \\\n  -f order-service-java-springboot.yml \\\n  -f delivery-service-java-springboot.yml \\\n  -f bookstore-ui-reactjs.yml \\\n  up -d\n</code></pre>"}]}